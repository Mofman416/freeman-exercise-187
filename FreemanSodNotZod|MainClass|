// AUTHOR: Michael Freeman
// COURSE: CPT 187
// PURPOSE: Gives the menus and interacts with the user to progress through the order to the final report
// CREATEDATE: 11/22/2020

package edu.cpt187.freeman.exercise6;
import java.util.Scanner;

public class MainClass 
{ // CONTAINS constants, main, methods
	public static final char[] MENU_CHARS = {'A', 'B', 'Q'};
	public static final String[] MENU_OPTIONS = {"Login", "Create an Account", "Quit"};
	public static final char[] FILE_MENU_CHARS = {'A', 'B', 'R'};
	public static final String[] FILE_MENU_OPTIONS = {"Load Inventory", "Create Order", "Return to Main Menu"};
	public static final char[] SUB_MENU_CHARS = {'A', 'B', 'C', 'D'};
	public static final String INVENTORY_FILE_NAME = "MasterInventoryFile.dat";
	public static final String ACCOUNTS_FILE_NAME = "MasterUserFile.dat";

	public static void main(String[] args) 
	{ // CONTAINS main
		// Scanner option
		Scanner input = new Scanner(System.in);

		// Non-constant variables
		String userName = "";
		char menuSelection = ' ';

		// Supporting class declarations
		Order currentOrder = new Order();
		Inventory currentInventory = new Inventory();
		WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);
		UserAccounts currentUser = new UserAccounts(ACCOUNTS_FILE_NAME);

		// Welcome banner
		displayWelcomeBanner();

		// Menu selection
		menuSelection = validateMainMenu(input);

		while (menuSelection != 'Q')
		{ // CONTAINS menu selection loop
			currentUser.setUserAccountArrays();
			userName = getUserName(input);
			if (menuSelection != 'A')
			{ // CONTAINS user login
				currentUser.setSearchedIndex(userName);
				if (currentUser.getSearchedIndex() >= 0)
				{ // CONTAINS username exists error
					displayAccountResults(userName);
				} // END OF username exists error

				else
				{ // CONTAINS create user information
					currentUser.setWriteOneRecord(userName, getPassword(input));
					displayAccountResults();
				} // END OF create user information
			} // END OF user login

			else
			{ // CONTAINS order processing
				currentUser.setSearchedIndex(userName, getPassword(input));

				if (currentUser.getSearchedIndex() < 0)
				{ // DISPLAY login error
					displayLoginError();
				} // END OF login error

				else
				{ // CONTAINS file selection and interaction
					menuSelection = validateFileSelection(input);

					while (menuSelection != 'R')
					{ // CONTAINS file selection complete, interaction
						if (menuSelection == 'A')
						{ // CONTAINS load inventory
							currentInventory.setLoadItems(getFileName(input));

							if (currentInventory.getRecordCount() <= 0)
							{ // CONTAINS file error
								displayFileError();
							} // END OF file error

							else
							{ // CONTAINS record report
								displayRecordReport(currentInventory.getRecordCount());
							} // END OF record report
						} // END OF load inventory

						else
						{ // CONTAINS item searching
							currentInventory.setSearchIndex(validateSearchValue(input));
							if (currentInventory.getItemSearchIndex() < 0)
							{ // CONTAINS display not found
								displayNotFound();
							} // END OF display not found

							else
							{ // CONTAINS set item properties
								currentOrder.setLastItemSelectedIndex(currentInventory.getItemSearchIndex());
								currentOrder.setItemID(currentInventory.getItemIDs());
								currentOrder.setItemName(currentInventory.getItemNames());
								currentOrder.setItemPrice(currentInventory.getItemPrices());
								currentOrder.setHowMany(validateHowMany(input));

								if (currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany())
								{ // CONTAINS out of stock error
									displayOutOfStock();
								} // END OF out of stock error

								else
								{ // CONTAINS discount properties
									currentOrder.setDiscountType(validateDiscountMenu(input, currentInventory.getDiscountNames(), 
											currentInventory.getDiscountRates()));
									currentOrder.setDiscountName(currentInventory.getDiscountNames());
									currentOrder.setDiscountRate(currentInventory.getDiscountRates());
									currentOrder.setDecreaseInStock(currentInventory);
									currentOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());
									orders.setWriteOrder(currentOrder.getItemID(), currentOrder.getItemName(), 
											currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getTotalCost());

									if (currentOrder.getDiscountRate() > 0.0)
									{ // CONTAINS order report, with discounts
										displayOrderReport(userName,
												currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), 
												currentOrder.getDiscountName(), currentOrder.getDiscountRate(), currentOrder.getDiscountAmt(), 
												currentOrder.getDiscountPrice(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), 
												currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(),
												currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									} // END OF order report, with discounts

									else
									{ // CONTAINS order report, without discounts
										displayOrderReport(userName,
												currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), 
												currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), 
												currentOrder.getTotalCost(), currentOrder.getPrizeName(),
												currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									} // END OF order report, without discounts
								} // END OF discount properties
							} // END OF item searching
						} // END OF file selection complete, interaction
						menuSelection = validateFileSelection(input);
					} // END OF file selection and interaction
				} // END OF order processing
			} // END OF order processing
			menuSelection = validateMainMenu(input);
		} // END OF menu Selection loop

		currentInventory.setLoadItems(orders.getFileName(), orders.getRecordCount());
		if (orders.getRecordCount() > 0)
		{ // CONTAINS final report
			displayFinalReport(currentInventory.getItemIDs(), currentInventory.getItemNames(),
					currentInventory.getItemPrices(), currentInventory.getOrderQuantities(), currentInventory.getOrderTotals(),
					currentInventory.getRecordCount(), currentInventory.getGrandTotal());
		} // END OF final report

		// Farewell message
		displayFarewellMessage();

		// Scanner closure
		input.close();
	} // END OF main

	// Void methods
	public static void displayWelcomeBanner()
	{ // CONTAINS welcome banner
		System.out.println("Welcome to the price calculating program!");
		System.out.println("This program shows stock, takes your inputs and calculates");
		System.out.println("the total price to show them to you,");
		System.out.println("with a chance of winning a prize!");
		System.out.println();
	} // END OF displayWelcomeBanner

	public static void displayFarewellMessage()
	{ // CONTAINS farewell message
		System.out.println("Thank you for using our price calculating program.");
		System.out.println("Have a good day!");
	} // END OF displayFarewellMessage

	public static void displayMainMenu()
	{ // CONTAINS main menu
		int localIndex = 0;
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
		System.out.println("MAIN MENU");
		while (localIndex < MENU_OPTIONS.length)
		{ // CONTAINS index selection and formatting
			System.out.printf("%-2s%-4s%s\n", MENU_CHARS[localIndex], "for", MENU_OPTIONS[localIndex]);
			localIndex++;
		} // END OF index selection and formatting
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
		System.out.println("Please enter a selection:");
	} // END OF displayMainMenu

	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{ // CONTAINS discount menu
		int localIndex = 0;
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
		System.out.println("DISCOUNT MENU");
		while (localIndex < borrowedDiscountNames.length)
		{ // CONTAINS index selection and formatting
			System.out.printf("%-2s%-4s%-25s%4.1f%-2s\n", SUB_MENU_CHARS[localIndex], "for", borrowedDiscountNames[localIndex], 
					borrowedDiscountRates[localIndex] * 100, "%");
			localIndex++;
		} // END OF index selection and formatting
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
		System.out.println("Please enter a selection:");
	} // END OF displayDiscountMenu

	public static void displayFileMenu()
	{ // CONTAINS file menu
		int localIndex = 0;
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
		System.out.println("FILE MENU");
		while (localIndex < FILE_MENU_OPTIONS.length)
		{ // CONTAINS index selection and formatting
			System.out.printf("%-2s%-4s%s\n", FILE_MENU_CHARS[localIndex], "for", FILE_MENU_OPTIONS[localIndex]);
			localIndex++;
		} // END OF index selection and formatting
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
		System.out.println("Please enter a selection:");
	} // END OF file menu

	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, 
			String borrowedDiscountName, double borrowedDiscountRate, double borrowedDiscountAmt, 
			double borrowedDiscountPrice, double borrowedSubTotal, double borrowedTaxRate, double borrowedTax, double borrowedTotalCost,
			String borrowedPrizeName, int borrowedInStockCount)
	{ // CONTAINS order report
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
		System.out.println("Order Report");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
		System.out.printf("%s%37s\n\n","Employee Name:", borrowedUserName);
		System.out.printf("%s%41s\n", "Item Name:", borrowedItemName);
		System.out.printf("%-40s%s%10.2f\n\n", "Item Price:", "$", borrowedItemPrice);
		System.out.printf("%s%37s\n", "Discount Name:", borrowedDiscountName);
		System.out.printf("%-40s%s%10.1f%s\n", "Discount Rate:", "", borrowedDiscountRate * 100, "%");
		System.out.printf("%-40s%s%10.2f\n", "Discount Amount:", "$", borrowedDiscountAmt);
		System.out.printf("%-40s%s%10.2f\n\n", "Discount Price:", "$", borrowedDiscountPrice);
		System.out.printf("%-40s%s%10s\n\n", "Quantity:", "", borrowedHowMany);
		System.out.printf("%-40s%s%10.2f\n", "Subtotal:", "$", borrowedSubTotal);
		System.out.printf("%-40s%10.1f%s\n", "Tax Rate:", borrowedTaxRate * 100, "%");
		System.out.printf("%-40s%s%10.2f\n\n", "Tax Amount:", "$", borrowedTax);
		System.out.printf("%-40s%s%10.2f\n\n", "Order Total:", "$", borrowedTotalCost);
		System.out.printf("%s%45s\n\n", "Prize:", borrowedPrizeName);
		System.out.printf("%-19s%-3d%s%s\n", "Buy more now: Only", borrowedInStockCount, borrowedItemName, "s left in-stock!");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
		System.out.println();
	} // END OF displayOrderReport

	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany,
			double borrowedSubTotal, double borrowedTaxRate, double borrowedTax, double borrowedTotalCost,
			String borrowedPrizeName, int borrowedInStockCount)
	{ // CONTAINS order report
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
		System.out.println("Order Report");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
		System.out.printf("%s%37s\n\n","Employee Name:", borrowedUserName);
		System.out.printf("%s%41s\n", "Item Name:", borrowedItemName);
		System.out.printf("%-40s%s%10.2f\n\n", "Item Price:", "$", borrowedItemPrice);
		System.out.printf("%-40s%s%10s\n\n", "Quantity:", "", borrowedHowMany);
		System.out.printf("%-40s%s%10.2f\n", "Subtotal:", "$", borrowedSubTotal);
		System.out.printf("%-40s%10.1f%s\n", "Tax Rate:", borrowedTaxRate * 100, "%");
		System.out.printf("%-40s%s%10.2f\n\n", "Tax Amount:", "$", borrowedTax);
		System.out.printf("%-40s%s%10.2f\n\n", "Order Amount:", "$", borrowedTotalCost);
		System.out.printf("%s%45s\n\n", "Prize:", borrowedPrizeName);
		System.out.printf("%-19s%-3d%s%s\n", "Buy more now: Only", borrowedInStockCount, borrowedItemName, "s left in-stock!");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
		System.out.println();
	} // END OF displayOrderReport

	public static void displayFinalReport(int[] borrowedItemIDs, String[] borrowedItemNames,
			double[] borrowedItemPrices, int[] borrowedOrderQuantities, double[] borrowedOrderTotals,
			int borrowedRecordCounts, double borrowedGrandTotal)
	{ // CONTAINS final report
		int localIndex = 0;

		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
		System.out.println("FINAL REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
		System.out.printf("%-6s%-24s%-14s%-7s%s\n", "ID", "NAME", "PRICE", "QTY", "TOTAL");
		while (localIndex < borrowedRecordCounts)
		{ // CONTAINS local index array assignment
			System.out.printf("%-6d%-24s%-3s%-11.2f%-7s%-3s%.2f\n", borrowedItemIDs[localIndex], borrowedItemNames[localIndex],
					"$", borrowedItemPrices[localIndex], borrowedOrderQuantities[localIndex], "$",
					borrowedOrderTotals[localIndex]);
			localIndex++;
		} // END OF local index array assignment
		System.out.println();
		System.out.println("GRAND TOTAL");
		System.out.printf("%-3s%.2f\n", "$", borrowedGrandTotal);
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
		System.out.println();
	} // END OF displayFinalReport

	public static void displayOutOfStock()
	{ // CONTAINS out of stock message
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
		System.out.println("OUT OF STOCK ERROR");
		System.out.println("The quantity entered is greater than the quantity in-stock");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
		System.out.println();
	} // END OF displayOutOfStock

	public static void displayRecordReport(int borrowedRecordCount)
	{ // CONTAINS record report
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
		System.out.println("RECORD REPORT");
		System.out.println(borrowedRecordCount + " records processed");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
	} // END OF record report

	public static void displayFileError()
	{ // CONTAINS not open display
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
		System.out.println("FILE ERROR");
		System.out.println("The file name was not found or could not be opened");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
	} // END OF displayNotOpen

	public static void displayNotFound()
	{ // CONTAINS not found display
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
		System.out.println("NOT FOUND ERROR");
		System.out.println("The search value entered was not found");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
	} // END OF not found display

	public static void displaySearchValue()
	{ // CONTAINS search value prompt
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
		System.out.println("Enter the search value:");
	} // END OF search value prompt

	public static void displayLoginError()
	{ // CONTAINS display login error
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
		System.out.println("LOGIN ERROR");
		System.out.println("Username and/or Password is incorrect.");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
	} // END OF displayLoginError

	public static void displayAccountResults(String userName)
	{ // CONTAINS display account results
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
		System.out.println("ACCOUNT RESULTS");
		System.out.println("Account not created: username, " + userName + ", already exists");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
	} // END OF display account results

	public static void displayAccountResults()
	{ // CONTAINS display account results
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
		System.out.println("ACCOUNT RESULTS");
		System.out.println("New account created");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
	} // END OF displayAccountResults

	// VR Methods
	public static String getUserName(Scanner borrowedInput)
	{ // CONTAINS user name input
		String localUserName = "";

		System.out.println("Please input your user name:");
		localUserName = borrowedInput.next();
		System.out.println();
		return localUserName;
	} // END OF getUserName

	public static String getPassword(Scanner borrowedInput)
	{ // CONTAINS user name input
		String localPassword = "";

		System.out.println("Please input your password:");
		localPassword = borrowedInput.next();
		System.out.println();
		return localPassword;
	} // END OF getUserName

	public static char validateMainMenu(Scanner borrowedInput)
	{ // CONTAINS main menu validation
		char localSelection = ' ';

		displayMainMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		System.out.println();

		while (localSelection != 'A' && localSelection !='B' && localSelection != 'Q')
		{ // CONTAINS error handling
			System.out.println("~~~~~Invalid Input!~~~~~");
			System.out.println();
			displayMainMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
			System.out.println();
		} // END OF error handling

		return localSelection;
	} // END OF validateMainMenu

	public static String validateHowMany(Scanner borrowedInput)
	{ // CONTAINS quantity validation
		String localHowMany = "";

		System.out.println("Please input how many you're trying to buy:");
		localHowMany = borrowedInput.next();
		System.out.println();

		while (Integer.parseInt(localHowMany) <= 0)
		{ // CONTAINS error handling
			System.out.println("~~~~~Invalid Input!~~~~~");
			System.out.println();
			System.out.println("Please input how many you're trying to buy:");
			localHowMany = borrowedInput.next();
			System.out.println();
		} // END OF error handling

		return localHowMany;
	} // END OF validateHowMany

	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames,
			double[] borrowedDiscountRates)
	{ // CONTAINS item validation
		char localSelection = ' ';

		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		System.out.println();

		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'C')
		{ // CONTAINS error handling
			System.out.println("~~~~~Invalid Input!~~~~~");
			System.out.println();
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
			System.out.println();
		} // END OF error handling

		return localSelection;
	} // END OF validateItemMenu

	public static String getFileName(Scanner borrowedInput)
	{ // CONTAINS file name prompt
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~");// Fancy formatting
		System.out.println("Enter the file name with extention (i.e. file.txt):");
		return borrowedInput.next();
	} // END OF getFileName

	public static int validateSearchValue(Scanner borrowedInput)
	{ // CONTAINS validate search value
		int localSearchValue = 0;
		displaySearchValue();
		localSearchValue = borrowedInput.nextInt();
		System.out.println();

		while (localSearchValue < 0)
		{ // CONTAINS error handling
			System.out.println("~~~~~Invalid Input!~~~~~");
			System.out.println();
			displaySearchValue();
			localSearchValue = borrowedInput.nextInt();
			System.out.println();
		} // END OF error handling

		return localSearchValue;
	} // END OF validateSearchValue

	public static char validateFileSelection(Scanner borrowedInput)
	{ // CONTAINS validate File Selection
		char localFileSelection = ' ';
		displayFileMenu();
		localFileSelection = borrowedInput.next().toUpperCase().charAt(0);
		System.out.println();

		while (localFileSelection != 'A' && localFileSelection != 'B' && localFileSelection != 'R')
		{ // CONTAINS error handling
			System.out.println("~~~~~Invalid Input!~~~~~");
			System.out.println();
			displayFileMenu();
			localFileSelection = borrowedInput.next().toUpperCase().charAt(0);
			System.out.println();
		} // END OF error handling

		return localFileSelection;
	} // END OF validate File Selection
} // END OF MainClass
